name: Terraform CI/CD

on:
  workflow_call:
    secrets:
      aws_identity_provider_role:
        description: "AWS Identity Provider Role"
        required: true
    inputs:
      app_name:
        description: "Name of the app to deploy"
        required: true
        type: string
      aws_region:
        description: "AWS Region to Deploy"
        required: true
        type: string
        default: "ap-south-1"
      with_backend:
        description: "need terraform with backend to store state"
        required: false
        default: false
        type: boolean
      backend_bucket:
        description: "terraform backend bucket name"
        required: false
        type: string
      TF_WORKING_DIR:
        description: "Terraform working directory"
        required: true
        type: string
      tfvars_file_name:
        description: "Name of the tfvars file to use"
        required: false
        default: "variables.tfvars.json"
        type: string
      command:
        description: "Run Terraform commands"
        required: true
        type: string
        default: apply

permissions:
  id-token: write

jobs:
  terraform:
    name: "Terraform Plan and Apply"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.TF_WORKING_DIR }}

    steps:
      - name: Validate Terraform Backend Configuration (backend_bucket)
        if: ${{ inputs.with_backend == true && !inputs.backend_bucket }}
        run: |
          echo "Error: backend_bucket must be provided for terraform with s3 backend to store state files"
          exit 1

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws_identity_provider_role }}
          aws-region: ${{ inputs.aws_region }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Logs Paths
        run: |
          echo "${{ inputs.TF_WORKING_DIR }}"
          
      - name: Terraform Init without s3 backend
        if: ${{ inputs.with_backend == false }}
        run: terraform init

      - name: Terraform Init with s3 backend
        if: ${{ inputs.with_backend == true }}
        run: |
          terraform init -backend-config="bucket=${{ inputs.backend_bucket }}" -backend-config="key=${{ inputs.app_name }}/terraform.tfstate" -backend-config="region=${{ inputs.aws_region }}" -backend-config="encrypt=true" -backend-config="use_lockfile=true"

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan -var-file="${{ inputs.tfvars_file_name }}"

      - name: Terraform Apply
        if: inputs.command == 'apply'
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: inputs.command == 'destroy'
        run: terraform destroy -auto-approve tfplan
